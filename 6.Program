#include <stdio.h>

int modInverse(int a, int m) {
    // Extended Euclidean Algorithm to find the modular multiplicative inverse
    int m0 = m, t, q;
    int x0 = 0, x1 = 1;

    if (m == 1)
        return 0;

    while (a > 1) {
        // q is quotient
        q = a / m;

        t = m;

        // m is remainder now; process same as Euclid's algo
        m = a % m, a = t;

        t = x0;

        x0 = x1 - q * x0;

        x1 = t;
    }

    // Make x1 positive
    if (x1 < 0)
        x1 += m0;

    return x1;
}

void breakAffineCipher(char ciphertext[], int a, int b) {
    int m = 26; // Size of the alphabet

    int a_inverse = modInverse(a, m);

    printf("Decryption Key: a=%d, b=%d\n", a_inverse, b);

    printf("Decrypted Message: ");
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (ciphertext[i] >= 'A' && ciphertext[i] <= 'Z') {
            // Decrypt each uppercase letter
            int ciphertextValue = ciphertext[i] - 'A';
            int decryptedValue = (a_inverse * (ciphertextValue - b + m)) % m;
            if (decryptedValue < 0)
                decryptedValue += m;

            printf("%c", 'A' + decryptedValue);
        } else {
            // Leave non-alphabetic characters unchanged
            printf("%c", ciphertext[i]);
        }
    }

    printf("\n");
}

int main() {
    char ciphertext[] = "BUAAABUBUABBUBUBU";
    
    // Assuming B maps to 1 and U maps to 20 in the plaintext
    int b_value = 1; // B's numeric equivalent
    int u_value = 20; // U's numeric equivalent

    // Calculate potential values for a and b
    // a = (U - B) * (b^(-1)) mod m
    int a = (u_value - b_value + 26) % 26;
    
    printf("Potential key: a=%d, b=%d\n", a, b_value);
    
    // Attempt to break the affine cipher
    breakAffineCipher(ciphertext, a, b_value);

    return 0;
}

#include <stdio.h>
#include <stdint.h>

#define STATE_SIZE 1600
#define RATE 1024
#define CAPACITY (STATE_SIZE - RATE)

typedef uint64_t state_t[STATE_SIZE / 64];

void keccak_p(state_t *state);

void absorb(state_t *state, const uint8_t *input, size_t input_size) {
    size_t i, j;
    size_t block_size = RATE / 8;

    for (i = 0; i < input_size; i += block_size) {
        for (j = 0; j < block_size; j++) {
            (*state)[j / 8] ^= ((uint64_t)input[i + j] << (8 * (j % 8)));
        }

        keccak_p(state);
    }
}

void print_state(const state_t *state) {
    for (size_t i = 0; i < STATE_SIZE / 64; i++) {
        printf("%016lx ", (*state)[i]);
        if ((i + 1) % 4 == 0) {
            printf("\n");
        }
    }
    printf("\n");
}

int main() {
    state_t state = {0};

    uint8_t message[] = "Hello, SHA-3!";
    size_t message_size = sizeof(message) - 1;

    printf("Initial State:\n");
    print_state(&state);

    absorb(&state, message, message_size);

    printf("State after Absorption:\n");
    print_state(&state);

    return 0;
}
